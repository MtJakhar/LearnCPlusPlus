Controlling Program Flow

selection
if, if-else, nested if, switch statement, conditional operator ?;

loops
for, while, do-while, continue and break, infinite and nested loops

if statement
  if(expr) 
    statement;

or 
  if(expression) {
    statement
  }

the latter "{}" is called a block statement. 

if- else

if(expr)
  statement1;
else if
  statement2
else
  statement3;

nested if statement
if(expr)
  if(expr)
    statement1;
  else
    statement2;

switch case

switch (integer_control expr) {
  case expression_1: statement; break;
  case expression_2: statement; break;
  case expression_3: statement; break;
  ...
  case expression_n: statement; break;
  default: statement
}

conditional operator
(conditional expression) ? expr1 : expr2;

looping

for loop

for(initialization; condition; increment) {
  statement
}

range based for loop

for(var_type var_name : sequence) {
  statement;
}

can use auto variable which looks at the variable type 

ex:

int scores [] {100, 90, 97};

for (int score : scores)
  cout << score << endl;

range-based for loop


while loop

while (expr) {
  statement;
}

do {
  statements;
} while (expr);

continue and break statements

continue
-no further statements in the body of the loop are executed
-control immediately goes directly to the beginning of the loop for the next iteration

break 
-no further statements in the body of the loop are executed
-loop is immediately terminated
-control immediately goes to the statment following the loop construct

infinite loop

-loops whose condition expression always evaluate to true
-usually this is a programmer error
-sometimes programmers use infinite loops and iclude and break statements in the body to control them
-