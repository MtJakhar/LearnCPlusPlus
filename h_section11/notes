Functions

What is a function?
functions allow the modularization of a program
most functions are in C++, and third party libraries
You can create your own functions

write your code to the function specification

c++ has many libraries
ex:
cmath- which has common math calculations

defining functions

name- be meaningful
parameter list- variables passed into the functions

return type- the type of the data that is returned from the function

body- the statements that are executed when the function is called

syntax example

int would be return type
int function_name () {
statement(s);
return 0;
}

void return type
void function_name () {
statements(s);
return; //optional
}

calling functions
FUNCTIONS MUST BE DECLARED BEFORE THEY ARE CALLED

Function Prototypes

the compiler must know about a function before it is used.

Define functions before calling them

-   ok for small programs
-   not a practical solution for larger programs

Use function prototypes

-   tells the compiler what it needs to know without a full function definition
-   also called forward declarations
-   placed at the beginning of the program
-   Also used in out header files.

ex:

int function_name();

int function_name() {
statements(s);
return 0;
}

Function parameters

-   when we call a function we can pass in data to that function.
-   in the function call they are called arguments.
-   in the function definition they are called parameters.
-   they must match in number, order, and in type.

pass by value

-   when you pass ata into a function it is passed by value
-   a copy of the data is passed to the function does NOT affect the argument that was passed in.

Formal vs Actual parameters

-   Formal parameters - the parameters defined in the function header
-   Actual parameters- the parameter used in the function call, the arguments
