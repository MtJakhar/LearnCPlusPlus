statements and operators

Expressions and statements
expression- most basic building block of a program
-sequence of operators and operands that specifies a computation

-   computes a value from a number of operands

examples

-   34 a literal
-   favorite_number a variable
-   addition \*
-   multiplication \*
-   relational <,>
-   assignment =

statements

-   a complete line of code that performs some action
-   usually terminated with a semi-colon
-   usually contain expressions
-   C++ has many types of statements

operators
three types
-unary, binary, ternary
-assignment =

arithmetic operators

-   -   / \* %

increment and decrement operator
++ --,
adds or subtract by 1

mixed type expressions

C++ operations occur on the same type of operands

if operands are of different types, C++ will convert one

Important since it could affect caluculations results

C++ will attempt to automatically convert types, if it cant a compiler error will occur

conversions
higher vs lower
long double > double > flaot

promotion conversion to higher type
demotion conversion to a lower type

-   static_cast<type>(varToChange) - allows you change the type of a variable

int total_amount = 100;
int total number = 8;

average = static_cast<double>(total_amount) / total_number

testing for equality

the == and != operators

-   evaluates to a boolean (true false, 1 or 0)
    -commonly ysed in control flow statements

expr1 == expr2
expr1 != expr2

std::boolalpha/noboolalpha returns true or flase

relational operators

> , >=, <, <=, and
> <=> -three way comparison

logical operators
not - !
and - &&
or - !!

compound assignment

+=m -+, \*=, /=
